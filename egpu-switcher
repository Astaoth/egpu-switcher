#!/bin/bash

# define some colors
RED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
BLANK='\033[0m'

# define log level prefix
ERROR="$RED[error]$BLANK"
WARN="$YELLOW[warn]$BLANK"
SUCCESS="$GREEN[success]$BLANK"
INFO="$BLUE[info]$BLANK"

# constant variables
XDIR=/etc/X11
XFILE=$XDIR/xorg.conf
XFILE_EGPU=$XDIR/xorg.conf.egpu
XFILE_INTERNAL=$XDIR/xorg.conf.internal
XFILE_BACKUP=$XFILE.backup
TMP_DIR=/tmp/egpu-switcher
TMP_FILE=$TMP_DIR/results
TMP_TEMPLATE=/usr/share/egpu-switcher/xorg.conf.template
SYSTEMD_TEMPLATE=/usr/share/egpu-switcher/egpu.service
SYSTEMD_FOLDER=/etc/systemd/system
DATETIME=$(date '+%Y%m%d%H%M%S')
NUMBER_REGEX='^[0-9]+$'

# check if the script is run as root
if [[ $EUID -ne 0 ]]; then 
  	echo -e "$ERROR You need to run the script with root privileges"
  	exit
fi

# check if an argument was passed
if [ -z $1 ]; then
	echo -e "$ERROR No argument passed."
	exit
fi

read_gpus() {
	if [ -z $1 ]; then
		printf "$INFO Using default argument for read_gpus().\n"
		set -- "lspci"
	fi

	if [ $1 = "nvidia-xconfig" ]; then
		nvidia-xconfig --query-gpu-info | grep -i -e 'gpu #[0-9]' | while read -r line ; do
			bus=$(nvidia-xconfig --query-gpu-info | grep "$line" -A 3 | awk '/PCI BusID/{print$4}')
			name=$(nvidia-xconfig --query-gpu-info | grep "$line" -A 3 | grep -oP 'Name\s+\:\s+\K.*')
			echo -e "$name ($bus)" >> $TMP_FILE
		done
		return
	fi

	if [ $1 = "lspci" ]; then
		lspci | grep -i -E "^[^\s]+\s+.*(vga|3d)" | while read -r line ; do
			name=$(echo $line | grep -o -e "[^:]*$")
			bus=$(echo $line | grep -o -e "^[^ ]*")

			# The bus IDs in hex
			bus1h=${bus:0:2}
			bus2h=${bus:3:2}
			bus3h=${bus:6:1}

			# The bus IDs in dec
			bus1d=$((16#$bus1h))
			bus2d=$((16#$bus2h))
			bus3d=$((16#$bus3h))

			# Remove the whitespace at the beginning of the name
			# And concatenate bus IDs
			echo -e "${name:1} (PCI:$bus1d:$bus2d:$bus3d)" >> $TMP_FILE
		done
		return
	fi

	echo -e "$ERROR Unknown option \"$1\" passed to is_egpu_connected. Exit program."
	exit
}

# returns 1 if egpu is connected, 0 if not
is_egpu_connected() {
	# read pci id from xorg.conf.egpu
	EGPU_PCI_ID=$(cat $XFILE_EGPU | grep -Ei "BusID" | grep -oEi '[0-9]+\:[0-9]+\:[0-9]+')

	if [ -z $1 ]; then
		printf "$INFO Using default argument for is_egpu_connected().\n"
		set -- "lspci"
	fi

	if [ $1 = "nvidia-xconfig" ]; then 
		if [ $(nvidia-xconfig --query-gpu-info | grep -c $EGPU_PCI_ID) -eq 1 ]; then
			return 1;
		else
			return 0;
		fi
	fi

	if [ $1 = "lspci" ]; then

		# giving your egpu some time to actually connect
		sleep 5s

		# create an array by splitting the BUS-ID on ':'
		busArray=(${EGPU_PCI_ID//:/ })
		bus1d=${busArray[0]}
		bus2d=${busArray[1]}
		bus3d=${busArray[2]}

		# convert dec to hex
		bus1h=$(printf "%02x" $bus1d)
		bus2h=$(printf "%02x" $bus2d)
		bus3h=$(printf "%01x" $bus3d)

		if [ $(lspci | grep -iEc "$bus1h:$bus2h.$bus3h") -eq 1 ]; then
			return 1;
		else
			return 0;
		fi
	fi

	echo -e "$ERROR Unknown option \"$1\" passed to is_egpu_connected. Exit program."
	exit
}

get_driver() {
	if [ -z "$1" ]; then
		printf "$ERROR No argument was passed to get_driver(), this is probably a bug and not your fault.\n"
		exit
	fi

	if [ $(echo "$1" | grep -Eic "nvidia") -gt 0 ]; then
		echo "nvidia"
		return
	fi

	if [ $(echo "$1" | grep -Eic "intel") -gt 0 ]; then
		echo "intel"
		return
	fi

	if [ $(echo "$1" | grep -Eic "amd") -gt 0 ]; then
		echo "amdgpu"
		return
	fi
}

setup() {

	# create the tmp dir
	mkdir -p $TMP_DIR

	# delete existing results file
	rm -f $TMP_FILE

	# check if the template/script files can be found
	if [ ! -f $TMP_TEMPLATE ]; then
		echo -e "$ERROR The file $TMP_TEMPLATE wasn't found. Are you connected to the Internet?"
		exit
	fi

	# search for GPUs and save them to the temp file
	read_gpus $1

	if ! [ -f $TMP_FILE ]; then 
		echo -e "$ERROR There was a problem in reading the connected GPUs."
		if ! [ -z $1 ]; then
			echo -e "$ERROR Maybe your argument \"$1\" is not valid?"
		fi
		exit
	fi

	# save the number of lines to a variable
	NUM_OF_RESULTS=$(wc -l < $TMP_FILE)

	# additional check
	if [ $NUM_OF_RESULTS -lt "2" ]; then
		echo -e "$WARN Only $NUM_OF_RESULTS GPUs found, there need to be at least 2. Make sure to connect your EGPU for the setup."
		exit
	fi

	# print the GPUs found
	echo ""
	echo -e "Found $NUM_OF_RESULTS possible GPUs..."
	echo ""

	i=0
	while read -r line; do
		i=$((i+1))
		echo "  $i: $line"
	done < "$TMP_FILE"

	echo ""

	# prompt to choose the internal gpu from the list
	printf "Choose your preferred$GREEN INTERNAL$BLANK GPU [1-$NUM_OF_RESULTS]: "
	read internal
	FULL_INTERNAL=$(sed ''"$internal"'q;d' $TMP_FILE)
	PCI_INTERNAL=$(sed ''"$internal"'q;d' $TMP_FILE | grep -Eo 'PCI\:[0-9]+\:[0-9]+\:[0-9]+')

	if ! [[ $internal =~ $NUMBER_REGEX ]] || [ -z "$PCI_INTERNAL" ]; then
		echo -e "$ERROR Your input is invalid. Exiting setup..."
		exit
	fi

	# prompt to choose the external gpu from the list
	printf "Choose your preferred$GREEN EXTERNAL$BLANK GPU [1-$NUM_OF_RESULTS]: "
	read external
	FULL_EXTERNAL=$(sed ''"$external"'q;d' $TMP_FILE)
	PCI_EXTERNAL=$(sed ''"$external"'q;d' $TMP_FILE | grep -Eo 'PCI\:[0-9]+\:[0-9]+\:[0-9]+')

	if ! [[ $external =~ $NUMBER_REGEX ]] || [ -z "$PCI_EXTERNAL" ]; then
		echo -e "$ERROR Your input is invalid. Exiting setup..."
		exit
	fi

	echo ""

	if ! [ -f $TMP_TEMPLATE ]; then
		echo -e "$ERROR Something is wrong with your installation, the file \"$TMP_TEMPLATE\" was not found."
	fi

	# create the internal xorg config file
	cp $TMP_TEMPLATE $XFILE_INTERNAL
	internal_driver=$(get_driver "$FULL_INTERNAL")
	if [ -z $internal_driver ]; then
		printf "$ERROR Could not parse manufacturer from \"$FULL_INTERNAL\". Please manually enter the driver to be used: "
		read driver
		internal_driver=$driver
	fi
	sed -i -e 's/\$BUS/'$PCI_INTERNAL'/g' -e 's/\$DRIVER/'$internal_driver'/g' -e 's/\$ID/Device0/g' $XFILE_INTERNAL

	# create the external xorg config file
	cp $TMP_TEMPLATE $XFILE_EGPU
	external_driver=$(get_driver "$FULL_EXTERNAL")
	if [ -z "$external_driver" ]; then
		printf "$ERROR Could not parse manufacturer from \"$FULL_EXTERNAL\". Please manually enter the driver to be used: "
		read driver
		external_driver=$driver
	fi
	sed -i -e 's/\$BUS/'$PCI_EXTERNAL'/g' -e 's/\$DRIVER/'$external_driver'/g' -e 's/\$ID/Device0/g' $XFILE_EGPU

	# Executing the switch command to create the xorg.conf file
	switch auto $1

	# setup startup script
	cp $SYSTEMD_TEMPLATE $SYSTEMD_FOLDER
	systemctl daemon-reload
	systemctl enable egpu.service

	echo -e "$SUCCESS Done... Setup finished"
}

switch() {
	# Check if the argument was passed
	if [ -z $1 ]; then
		echo -e "$ERROR No argument passed to the switch method. Possible options: auto, egpu, internal"
		exit
	fi

	# Check if the xorg.conf files for internal and egpu exist
	if ! [ -f $XFILE_EGPU ] || ! [ -f $XFILE_INTERNAL ]; then
		echo -e "$ERROR The xorg.conf files for egpu and internal do not exist. Run the setup first."
		return
	fi

	# Check if there is a xorg.conf file, and back it up
	if [ -f $XFILE ] && ! [ -L $XFILE ]; then
		echo -e "$WARN The $XFILE file already exists. Saving a backup to $XFILE_BACKUP.$DATETIME"
		cp "$XFILE" "$XFILE_BACKUP.$DATETIME"
	fi

	# if no parameter was passed to the method
	if [ $1 = "auto" ]; then

		is_egpu_connected $2
		local connected=$?
		printf "$INFO Automatically detecting if egpu is connected... "
		if [ $connected = 1 ] ; then
			echo -e "$GREEN true"
			set -- "egpu"
		else
			echo -e "$RED false"
			set -- "internal"
		fi
	fi

	if [ $1 = "egpu" ] && [ $(grep -ce "nvidia" $XFILE_EGPU) -eq 0 ]; then
		EGPU_PCI_ID=$(cat $XFILE_EGPU | grep -Ei "BusID" | grep -oEi '[0-9]+\:[0-9]+\:[0-9]+')
		# create an array by splitting the BUS-ID on ':'
		busArray=(${EGPU_PCI_ID//:/ })
		bus1d=${busArray[0]}
		bus2d=${busArray[1]}
		bus3d=${busArray[2]}
		# convert dec to hex
		bus1h=$(printf "%02x" $bus1d)
		bus2h=$(printf "%02x" $bus2d)
		bus3h=$(printf "%01x" $bus3d)
		HEX_ID=$(echo $bus1h:$bus2h.$bus3h)
		DISP_PATH=/sys/bus/pci/devices/[0-9a-f:]*${HEX_ID}/drm/card[0-9]*/card[0-9]*-*/status
		DISP_NUM=0
		DISP_DISCONNECT=0
		for DISP in ${DISP_PATH}; do
			if [ -e $DISP ]; then
				DISP_NUM=$(expr $DISP_NUM + 1)
				DISP_DISCONNECT=$(expr $DISP_DISCONNECT + $(cat $DISP | grep -ce ^disconnected$))
			fi
		done
		if [ $DISP_DISCONNECT -eq $DISP_NUM ] && [ $DISP_NUM -gt 0 ]; then
			echo -e "$WARN No eGPU attached display detected with open source drivers. (Of $DISP_NUM eGPU outputs detected) Internal mode and setting DRI_PRIME variable are recommended for this configuration."
			if [[ $2 = "override" ]]; then
				echo -e "$WARN -> Overridden: Setting eGPU mode"
				set -- "egpu"
			else
				echo -e "$WARN Run 'egpu-switcher switch egpu override' to force loading eGPU mode"
				echo -e "$WARN -> Not setting eGPU mode."
				set -- "internal"
			fi
		fi
	fi

	if [ $1 = "egpu" ]; then
		echo -e "$INFO Create symlink $GREEN$XFILE$BLANK -> $XFILE_EGPU"
		ln -sf $XFILE_EGPU $XFILE
		return
	fi

	if [ $1 = "internal" ]; then
		echo -e "$INFO Create symlink $GREEN$XFILE$BLANK -> $XFILE_INTERNAL"
		ln -sf $XFILE_INTERNAL $XFILE
		return
	fi

	echo -e "$ERROR The argument \"$1\" that was passed to the switch method is not valid."
}

cleanup() {
	echo -e "$INFO Starting cleanup process"
	rm -rfd $TMP_DIR
	rm -rf $XFILE_EGPU
	rm -rf $XFILE_INTERNAL

	# delete the xorg.conf file, if it is a symlink and restore the last backup
	if [ -L $XFILE ]; then
		rm -rf $XFILE
		local lastbackup=$(ls -t $XFILE_BACKUP.* | head -1)
		if [ -f $lastbackup ]; then
			echo -e "$INFO Restoring latest backup $GREEN$lastbackup"
			mv $lastbackup $XFILE
		fi
	fi

	systemctl stop egpu.service
	systemctl disable egpu.service
	rm $SYSTEMD_FOLDER/egpu.service
	systemctl daemon-reload
	systemctl reset-failed

	echo -e "$SUCCESS Done... Finished cleanup"
}

if [ $1 = "setup" ]; then
	setup $2
fi

if [ $1 = "switch" ]; then
	switch $2 $3
fi

if [ $1 = "cleanup" ]; then
	cleanup
fi

# systemctl restart display-manager.service
